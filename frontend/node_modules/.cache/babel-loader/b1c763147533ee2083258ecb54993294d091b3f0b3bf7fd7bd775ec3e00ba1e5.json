{"ast":null,"code":"// sleepAPI.js — client for the Django routes (same-origin)\n\n// BASE: API root. Keep empty for same-origin requests.\nconst BASE = \"http://localhost:8000\"; // or \"http://localhost:8000\" if Django runs separately\n\n/**\r\n * Helper to send a JSON fetch request and return parsed data.\r\n * Throws an error if the response status is not OK.\r\n */\nasync function jsonFetch(url, opts = {}) {\n  const res = await fetch(url, {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    ...opts\n  });\n  const data = await res.json().catch(() => ({}));\n  if (!res.ok) throw new Error((data === null || data === void 0 ? void 0 : data.error) || `HTTP ${res.status}`);\n  return data;\n}\n\n/**\r\n * SleepAPI — small wrapper for all sleep endpoints.\r\n * Each function talks to the Django backend and returns JSON.\r\n */\nexport const SleepAPI = {\n  /** Add a new sleep log entry (bed and wake times). */\n  addLog: async (bed, wake) => jsonFetch(`${BASE}/sleep/add`, {\n    method: \"POST\",\n    body: JSON.stringify({\n      bed,\n      wake\n    })\n  }),\n  /** Get the most recent sleep logs (default 5). */\n  getRecent: async (n = 5) => jsonFetch(`${BASE}/sleep/recent?n=${encodeURIComponent(n)}`),\n  /** Get the average sleep duration over the last k logs (default 7). */\n  getAverage: async (k = 7) => jsonFetch(`${BASE}/sleep/average?k=${encodeURIComponent(k)}`),\n  /** Plan an alarm set X minutes from now. */\n  planAlarm: async minutes => jsonFetch(`${BASE}/alarm/plan`, {\n    method: \"POST\",\n    body: JSON.stringify({\n      minutes\n    })\n  })\n};","map":{"version":3,"names":["BASE","jsonFetch","url","opts","res","fetch","headers","data","json","catch","ok","Error","error","status","SleepAPI","addLog","bed","wake","method","body","JSON","stringify","getRecent","n","encodeURIComponent","getAverage","k","planAlarm","minutes"],"sources":["C:/Users/abdul/Desktop/NASA Hackathon/NASASpaceAppsChallenge/frontend/src/services/sleepAPI.js"],"sourcesContent":["// sleepAPI.js — client for the Django routes (same-origin)\r\n\r\n// BASE: API root. Keep empty for same-origin requests.\r\nconst BASE = \"http://localhost:8000\"; // or \"http://localhost:8000\" if Django runs separately\r\n\r\n/**\r\n * Helper to send a JSON fetch request and return parsed data.\r\n * Throws an error if the response status is not OK.\r\n */\r\nasync function jsonFetch(url, opts = {}) {\r\n  const res = await fetch(url, {\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    ...opts,\r\n  });\r\n  const data = await res.json().catch(() => ({}));\r\n  if (!res.ok) throw new Error(data?.error || `HTTP ${res.status}`);\r\n  return data;\r\n}\r\n\r\n/**\r\n * SleepAPI — small wrapper for all sleep endpoints.\r\n * Each function talks to the Django backend and returns JSON.\r\n */\r\nexport const SleepAPI = {\r\n  /** Add a new sleep log entry (bed and wake times). */\r\n  addLog: async (bed, wake) =>\r\n    jsonFetch(`${BASE}/sleep/add`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify({ bed, wake }),\r\n    }),\r\n\r\n  /** Get the most recent sleep logs (default 5). */\r\n  getRecent: async (n = 5) =>\r\n    jsonFetch(`${BASE}/sleep/recent?n=${encodeURIComponent(n)}`),\r\n\r\n  /** Get the average sleep duration over the last k logs (default 7). */\r\n  getAverage: async (k = 7) =>\r\n    jsonFetch(`${BASE}/sleep/average?k=${encodeURIComponent(k)}`),\r\n\r\n  /** Plan an alarm set X minutes from now. */\r\n  planAlarm: async (minutes) =>\r\n    jsonFetch(`${BASE}/alarm/plan`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify({ minutes }),\r\n    }),\r\n};\r\n"],"mappings":"AAAA;;AAEA;AACA,MAAMA,IAAI,GAAG,uBAAuB,CAAC,CAAC;;AAEtC;AACA;AACA;AACA;AACA,eAAeC,SAASA,CAACC,GAAG,EAAEC,IAAI,GAAG,CAAC,CAAC,EAAE;EACvC,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACH,GAAG,EAAE;IAC3BI,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/C,GAAGH;EACL,CAAC,CAAC;EACF,MAAMI,IAAI,GAAG,MAAMH,GAAG,CAACI,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;EAC/C,IAAI,CAACL,GAAG,CAACM,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,CAAAJ,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEK,KAAK,KAAI,QAAQR,GAAG,CAACS,MAAM,EAAE,CAAC;EACjE,OAAON,IAAI;AACb;;AAEA;AACA;AACA;AACA;AACA,OAAO,MAAMO,QAAQ,GAAG;EACtB;EACAC,MAAM,EAAE,MAAAA,CAAOC,GAAG,EAAEC,IAAI,KACtBhB,SAAS,CAAC,GAAGD,IAAI,YAAY,EAAE;IAC7BkB,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEL,GAAG;MAAEC;IAAK,CAAC;EACpC,CAAC,CAAC;EAEJ;EACAK,SAAS,EAAE,MAAAA,CAAOC,CAAC,GAAG,CAAC,KACrBtB,SAAS,CAAC,GAAGD,IAAI,mBAAmBwB,kBAAkB,CAACD,CAAC,CAAC,EAAE,CAAC;EAE9D;EACAE,UAAU,EAAE,MAAAA,CAAOC,CAAC,GAAG,CAAC,KACtBzB,SAAS,CAAC,GAAGD,IAAI,oBAAoBwB,kBAAkB,CAACE,CAAC,CAAC,EAAE,CAAC;EAE/D;EACAC,SAAS,EAAE,MAAOC,OAAO,IACvB3B,SAAS,CAAC,GAAGD,IAAI,aAAa,EAAE;IAC9BkB,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEO;IAAQ,CAAC;EAClC,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}