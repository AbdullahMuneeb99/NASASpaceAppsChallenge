{"ast":null,"code":"// lifesupportAPI.js\n/** Base path for the Flask routes (adjust if your server differs). */\nconst BASE_URL = \"http://localhost:8000\";\n\n/** Helper to call the API and parse JSON, with friendly errors. */\nasync function request(path, options = {}) {\n  const res = await fetch(`${BASE_URL}${path}`, {\n    method: options.method || 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      ...(options.headers || {})\n    },\n    body: options.body ? JSON.stringify(options.body) : undefined\n  });\n  const text = await res.text(); // handle empty bodies safely\n  const data = text ? JSON.parse(text) : null;\n  if (!res.ok) {\n    const msg = data && (data.error || data.message) || `HTTP ${res.status}`;\n    throw new Error(`LifeSupportAPI: ${msg}`);\n  }\n  return data;\n}\n\n/** Get current life-support status (oxygen, pressure, water, alerts). */\nexport function getStatus() {\n  return request('/status');\n}\n\n/** Simulate environment changes (random drift + leak chance). */\nexport function simulateEnvironment() {\n  return request('/simulate', {\n    method: 'POST'\n  });\n}\n\n/** Refill water reserves to 100%. */\nexport function refillWater() {\n  return request('/refill-water', {\n    method: 'POST'\n  });\n}\n\n/** Repair a detected leak (no-op if none). */\nexport function repairLeak() {\n  return request('/repair-leak', {\n    method: 'POST'\n  });\n}\n\n/** Optional default export for convenience. */\nexport default {\n  getStatus,\n  simulateEnvironment,\n  refillWater,\n  repairLeak\n};","map":{"version":3,"names":["BASE_URL","request","path","options","res","fetch","method","headers","body","JSON","stringify","undefined","text","data","parse","ok","msg","error","message","status","Error","getStatus","simulateEnvironment","refillWater","repairLeak"],"sources":["C:/Users/abdul/Desktop/NASA Hackathon/NASASpaceAppsChallenge/frontend/src/services/lifeSupportAPI.js"],"sourcesContent":["// lifesupportAPI.js\r\n/** Base path for the Flask routes (adjust if your server differs). */\r\nconst BASE_URL = \"http://localhost:8000\";\r\n\r\n/** Helper to call the API and parse JSON, with friendly errors. */\r\nasync function request(path, options = {}) {\r\n  const res = await fetch(`${BASE_URL}${path}`, {\r\n    method: options.method || 'GET',\r\n    headers: { 'Content-Type': 'application/json', ...(options.headers || {}) },\r\n    body: options.body ? JSON.stringify(options.body) : undefined,\r\n  });\r\n  const text = await res.text(); // handle empty bodies safely\r\n  const data = text ? JSON.parse(text) : null;\r\n  if (!res.ok) {\r\n    const msg = (data && (data.error || data.message)) || `HTTP ${res.status}`;\r\n    throw new Error(`LifeSupportAPI: ${msg}`);\r\n  }\r\n  return data;\r\n}\r\n\r\n/** Get current life-support status (oxygen, pressure, water, alerts). */\r\nexport function getStatus() {\r\n  return request('/status');\r\n}\r\n\r\n/** Simulate environment changes (random drift + leak chance). */\r\nexport function simulateEnvironment() {\r\n  return request('/simulate', { method: 'POST' });\r\n}\r\n\r\n/** Refill water reserves to 100%. */\r\nexport function refillWater() {\r\n  return request('/refill-water', { method: 'POST' });\r\n}\r\n\r\n/** Repair a detected leak (no-op if none). */\r\nexport function repairLeak() {\r\n  return request('/repair-leak', { method: 'POST' });\r\n}\r\n\r\n/** Optional default export for convenience. */\r\nexport default { getStatus, simulateEnvironment, refillWater, repairLeak };\r\n"],"mappings":"AAAA;AACA;AACA,MAAMA,QAAQ,GAAG,uBAAuB;;AAExC;AACA,eAAeC,OAAOA,CAACC,IAAI,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EACzC,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGL,QAAQ,GAAGE,IAAI,EAAE,EAAE;IAC5CI,MAAM,EAAEH,OAAO,CAACG,MAAM,IAAI,KAAK;IAC/BC,OAAO,EAAE;MAAE,cAAc,EAAE,kBAAkB;MAAE,IAAIJ,OAAO,CAACI,OAAO,IAAI,CAAC,CAAC;IAAE,CAAC;IAC3EC,IAAI,EAAEL,OAAO,CAACK,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACP,OAAO,CAACK,IAAI,CAAC,GAAGG;EACtD,CAAC,CAAC;EACF,MAAMC,IAAI,GAAG,MAAMR,GAAG,CAACQ,IAAI,CAAC,CAAC,CAAC,CAAC;EAC/B,MAAMC,IAAI,GAAGD,IAAI,GAAGH,IAAI,CAACK,KAAK,CAACF,IAAI,CAAC,GAAG,IAAI;EAC3C,IAAI,CAACR,GAAG,CAACW,EAAE,EAAE;IACX,MAAMC,GAAG,GAAIH,IAAI,KAAKA,IAAI,CAACI,KAAK,IAAIJ,IAAI,CAACK,OAAO,CAAC,IAAK,QAAQd,GAAG,CAACe,MAAM,EAAE;IAC1E,MAAM,IAAIC,KAAK,CAAC,mBAAmBJ,GAAG,EAAE,CAAC;EAC3C;EACA,OAAOH,IAAI;AACb;;AAEA;AACA,OAAO,SAASQ,SAASA,CAAA,EAAG;EAC1B,OAAOpB,OAAO,CAAC,SAAS,CAAC;AAC3B;;AAEA;AACA,OAAO,SAASqB,mBAAmBA,CAAA,EAAG;EACpC,OAAOrB,OAAO,CAAC,WAAW,EAAE;IAAEK,MAAM,EAAE;EAAO,CAAC,CAAC;AACjD;;AAEA;AACA,OAAO,SAASiB,WAAWA,CAAA,EAAG;EAC5B,OAAOtB,OAAO,CAAC,eAAe,EAAE;IAAEK,MAAM,EAAE;EAAO,CAAC,CAAC;AACrD;;AAEA;AACA,OAAO,SAASkB,UAAUA,CAAA,EAAG;EAC3B,OAAOvB,OAAO,CAAC,cAAc,EAAE;IAAEK,MAAM,EAAE;EAAO,CAAC,CAAC;AACpD;;AAEA;AACA,eAAe;EAAEe,SAAS;EAAEC,mBAAmB;EAAEC,WAAW;EAAEC;AAAW,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}