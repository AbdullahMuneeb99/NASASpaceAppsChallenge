{"ast":null,"code":"// logbookAPI.js — client for Logbook backend routes\n\n// BASE: API root. Keep empty for same-origin requests.\n// If backend runs on a different port (e.g. Flask/Django dev), set accordingly.\nconst BASE = \"http://localhost:8000\";\n\n/**\r\n * Helper: fetch JSON, throw on non-OK response.\r\n */\nasync function jsonFetch(url, opts = {}) {\n  const res = await fetch(url, {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    ...opts\n  });\n  const data = await res.json().catch(() => ({}));\n  if (!res.ok) throw new Error((data === null || data === void 0 ? void 0 : data.error) || `HTTP ${res.status}`);\n  return data;\n}\n\n/**\r\n * LogbookAPI — wrapper for crew logbook routes.\r\n * Expected backend routes:\r\n *  GET    /logbook/entries\r\n *  POST   /logbook/entry       { author, content }\r\n *  DELETE /logbook/entry/:id\r\n */\nexport const LogbookAPI = {\n  /** Fetch all logbook entries. */\n  getEntries: () => jsonFetch(`${BASE}/logbook/entries`),\n  /** Add a new logbook entry. */\n  addEntry: (author, content) => jsonFetch(`${BASE}/logbook/entry`, {\n    method: \"POST\",\n    body: JSON.stringify({\n      author,\n      content\n    })\n  }),\n  /** Delete an entry by ID. */\n  deleteEntry: id => jsonFetch(`${BASE}/logbook/entry/${encodeURIComponent(id)}`, {\n    method: \"DELETE\"\n  })\n};","map":{"version":3,"names":["BASE","jsonFetch","url","opts","res","fetch","headers","data","json","catch","ok","Error","error","status","LogbookAPI","getEntries","addEntry","author","content","method","body","JSON","stringify","deleteEntry","id","encodeURIComponent"],"sources":["C:/Users/abdul/Desktop/NASA Hackathon/NASASpaceAppsChallenge/frontend/src/services/logbookAPI.js"],"sourcesContent":["// logbookAPI.js — client for Logbook backend routes\r\n\r\n// BASE: API root. Keep empty for same-origin requests.\r\n// If backend runs on a different port (e.g. Flask/Django dev), set accordingly.\r\nconst BASE = \"http://localhost:8000\";\r\n\r\n/**\r\n * Helper: fetch JSON, throw on non-OK response.\r\n */\r\nasync function jsonFetch(url, opts = {}) {\r\n  const res = await fetch(url, {\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    ...opts,\r\n  });\r\n  const data = await res.json().catch(() => ({}));\r\n  if (!res.ok) throw new Error(data?.error || `HTTP ${res.status}`);\r\n  return data;\r\n}\r\n\r\n/**\r\n * LogbookAPI — wrapper for crew logbook routes.\r\n * Expected backend routes:\r\n *  GET    /logbook/entries\r\n *  POST   /logbook/entry       { author, content }\r\n *  DELETE /logbook/entry/:id\r\n */\r\nexport const LogbookAPI = {\r\n  /** Fetch all logbook entries. */\r\n  getEntries: () => jsonFetch(`${BASE}/logbook/entries`),\r\n\r\n  /** Add a new logbook entry. */\r\n  addEntry: (author, content) =>\r\n    jsonFetch(`${BASE}/logbook/entry`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify({ author, content }),\r\n    }),\r\n\r\n  /** Delete an entry by ID. */\r\n  deleteEntry: (id) =>\r\n    jsonFetch(`${BASE}/logbook/entry/${encodeURIComponent(id)}`, {\r\n      method: \"DELETE\",\r\n    }),\r\n};\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA,MAAMA,IAAI,GAAG,uBAAuB;;AAEpC;AACA;AACA;AACA,eAAeC,SAASA,CAACC,GAAG,EAAEC,IAAI,GAAG,CAAC,CAAC,EAAE;EACvC,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACH,GAAG,EAAE;IAC3BI,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/C,GAAGH;EACL,CAAC,CAAC;EACF,MAAMI,IAAI,GAAG,MAAMH,GAAG,CAACI,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;EAC/C,IAAI,CAACL,GAAG,CAACM,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,CAAAJ,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEK,KAAK,KAAI,QAAQR,GAAG,CAACS,MAAM,EAAE,CAAC;EACjE,OAAON,IAAI;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMO,UAAU,GAAG;EACxB;EACAC,UAAU,EAAEA,CAAA,KAAMd,SAAS,CAAC,GAAGD,IAAI,kBAAkB,CAAC;EAEtD;EACAgB,QAAQ,EAAEA,CAACC,MAAM,EAAEC,OAAO,KACxBjB,SAAS,CAAC,GAAGD,IAAI,gBAAgB,EAAE;IACjCmB,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEL,MAAM;MAAEC;IAAQ,CAAC;EAC1C,CAAC,CAAC;EAEJ;EACAK,WAAW,EAAGC,EAAE,IACdvB,SAAS,CAAC,GAAGD,IAAI,kBAAkByB,kBAAkB,CAACD,EAAE,CAAC,EAAE,EAAE;IAC3DL,MAAM,EAAE;EACV,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}