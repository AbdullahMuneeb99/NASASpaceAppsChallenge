{"ast":null,"code":"// powerAPI.js — client for Power Systems backend routes\n\n// BASE: API root. Leave empty for same-origin, or point to backend dev URL.\nconst BASE = \"http://localhost:5000\";\nasync function jsonFetch(url, opts = {}) {\n  const res = await fetch(url, {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    ...opts\n  });\n  const data = await res.json().catch(() => ({}));\n  if (!res.ok) throw new Error((data === null || data === void 0 ? void 0 : data.error) || `HTTP ${res.status}`);\n  return data;\n}\nexport const PowerAPI = {\n  /** Fetch current power status. */\n  getStatus: () => jsonFetch(`${BASE}/power/status`),\n  /** Simulate power usage (battery drain). */\n  simulate: () => jsonFetch(`${BASE}/power/simulate`, {\n    method: \"POST\"\n  }),\n  /** Perform maintenance (restore battery, clear alerts). */\n  maintain: () => jsonFetch(`${BASE}/power/maintain`, {\n    method: \"POST\"\n  })\n};","map":{"version":3,"names":["BASE","jsonFetch","url","opts","res","fetch","headers","data","json","catch","ok","Error","error","status","PowerAPI","getStatus","simulate","method","maintain"],"sources":["C:/Users/abdul/Desktop/NASA Hackathon/NASASpaceAppsChallenge/frontend/src/services/powerAPI.js"],"sourcesContent":["// powerAPI.js — client for Power Systems backend routes\r\n\r\n// BASE: API root. Leave empty for same-origin, or point to backend dev URL.\r\nconst BASE = \"http://localhost:5000\";\r\n\r\n\r\nasync function jsonFetch(url, opts = {}) {\r\n  const res = await fetch(url, {\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    ...opts,\r\n  });\r\n  const data = await res.json().catch(() => ({}));\r\n  if (!res.ok) throw new Error(data?.error || `HTTP ${res.status}`);\r\n  return data;\r\n}\r\n\r\nexport const PowerAPI = {\r\n  /** Fetch current power status. */\r\n  getStatus: () => jsonFetch(`${BASE}/power/status`),\r\n\r\n  /** Simulate power usage (battery drain). */\r\n  simulate: () =>\r\n    jsonFetch(`${BASE}/power/simulate`, {\r\n      method: \"POST\",\r\n    }),\r\n\r\n  /** Perform maintenance (restore battery, clear alerts). */\r\n  maintain: () =>\r\n    jsonFetch(`${BASE}/power/maintain`, {\r\n      method: \"POST\",\r\n    }),\r\n};\r\n"],"mappings":"AAAA;;AAEA;AACA,MAAMA,IAAI,GAAG,uBAAuB;AAGpC,eAAeC,SAASA,CAACC,GAAG,EAAEC,IAAI,GAAG,CAAC,CAAC,EAAE;EACvC,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACH,GAAG,EAAE;IAC3BI,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/C,GAAGH;EACL,CAAC,CAAC;EACF,MAAMI,IAAI,GAAG,MAAMH,GAAG,CAACI,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;EAC/C,IAAI,CAACL,GAAG,CAACM,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,CAAAJ,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEK,KAAK,KAAI,QAAQR,GAAG,CAACS,MAAM,EAAE,CAAC;EACjE,OAAON,IAAI;AACb;AAEA,OAAO,MAAMO,QAAQ,GAAG;EACtB;EACAC,SAAS,EAAEA,CAAA,KAAMd,SAAS,CAAC,GAAGD,IAAI,eAAe,CAAC;EAElD;EACAgB,QAAQ,EAAEA,CAAA,KACRf,SAAS,CAAC,GAAGD,IAAI,iBAAiB,EAAE;IAClCiB,MAAM,EAAE;EACV,CAAC,CAAC;EAEJ;EACAC,QAAQ,EAAEA,CAAA,KACRjB,SAAS,CAAC,GAAGD,IAAI,iBAAiB,EAAE;IAClCiB,MAAM,EAAE;EACV,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}