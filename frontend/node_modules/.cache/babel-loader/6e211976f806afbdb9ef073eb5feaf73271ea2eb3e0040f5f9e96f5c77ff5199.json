{"ast":null,"code":"// API root. Keep empty for same-origin; set to \"http://localhost:8000\" if needed.\nconst BASE = \"http://localhost:8000\";\n\n/** Send JSON and return parsed JSON (throws on non-2xx). */\nasync function jsonFetch(url, opts = {}) {\n  const res = await fetch(url, {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    ...opts\n  });\n  const data = await res.json().catch(() => ({}));\n  if (!res.ok) throw new Error((data === null || data === void 0 ? void 0 : data.error) || `HTTP ${res.status}`);\n  return data;\n}\n\n/** Communications API wrapper. Expects routes like:\r\n *  POST /comms/send        { sender, recipient, channel, content, type }\r\n *  GET  /comms/messages?channel=crew|earth|station\r\n *  GET  /comms/latest?channel=...\r\n *  POST /comms/clear       {}\r\n */\nexport const CommunicationsAPI = {\n  sendMessage: payload => jsonFetch(`${BASE}/comms/send`, {\n    method: \"POST\",\n    body: JSON.stringify(payload)\n  }),\n  getMessages: (channel = \"\") => jsonFetch(`${BASE}/comms/messages${channel ? `?channel=${encodeURIComponent(channel)}` : \"\"}`),\n  getLatest: (channel = \"\") => jsonFetch(`${BASE}/comms/latest${channel ? `?channel=${encodeURIComponent(channel)}` : \"\"}`),\n  clear: () => jsonFetch(`${BASE}/comms/clear`, {\n    method: \"POST\",\n    body: \"{}\"\n  })\n};","map":{"version":3,"names":["BASE","jsonFetch","url","opts","res","fetch","headers","data","json","catch","ok","Error","error","status","CommunicationsAPI","sendMessage","payload","method","body","JSON","stringify","getMessages","channel","encodeURIComponent","getLatest","clear"],"sources":["C:/Users/abdul/Desktop/NASA Hackathon/NASASpaceAppsChallenge/frontend/src/services/communicationsAPI.js"],"sourcesContent":["// API root. Keep empty for same-origin; set to \"http://localhost:8000\" if needed.\r\nconst BASE = \"http://localhost:8000\";\r\n\r\n/** Send JSON and return parsed JSON (throws on non-2xx). */\r\nasync function jsonFetch(url, opts = {}) {\r\n  const res = await fetch(url, {\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    ...opts,\r\n  });\r\n  const data = await res.json().catch(() => ({}));\r\n  if (!res.ok) throw new Error(data?.error || `HTTP ${res.status}`);\r\n  return data;\r\n}\r\n\r\n/** Communications API wrapper. Expects routes like:\r\n *  POST /comms/send        { sender, recipient, channel, content, type }\r\n *  GET  /comms/messages?channel=crew|earth|station\r\n *  GET  /comms/latest?channel=...\r\n *  POST /comms/clear       {}\r\n */\r\nexport const CommunicationsAPI = {\r\n  sendMessage: (payload) =>\r\n    jsonFetch(`${BASE}/comms/send`, { method: \"POST\", body: JSON.stringify(payload) }),\r\n\r\n  getMessages: (channel = \"\") =>\r\n    jsonFetch(`${BASE}/comms/messages${channel ? `?channel=${encodeURIComponent(channel)}` : \"\"}`),\r\n\r\n  getLatest: (channel = \"\") =>\r\n    jsonFetch(`${BASE}/comms/latest${channel ? `?channel=${encodeURIComponent(channel)}` : \"\"}`),\r\n\r\n  clear: () => jsonFetch(`${BASE}/comms/clear`, { method: \"POST\", body: \"{}\" }),\r\n};\r\n"],"mappings":"AAAA;AACA,MAAMA,IAAI,GAAG,uBAAuB;;AAEpC;AACA,eAAeC,SAASA,CAACC,GAAG,EAAEC,IAAI,GAAG,CAAC,CAAC,EAAE;EACvC,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACH,GAAG,EAAE;IAC3BI,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/C,GAAGH;EACL,CAAC,CAAC;EACF,MAAMI,IAAI,GAAG,MAAMH,GAAG,CAACI,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;EAC/C,IAAI,CAACL,GAAG,CAACM,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,CAAAJ,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEK,KAAK,KAAI,QAAQR,GAAG,CAACS,MAAM,EAAE,CAAC;EACjE,OAAON,IAAI;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMO,iBAAiB,GAAG;EAC/BC,WAAW,EAAGC,OAAO,IACnBf,SAAS,CAAC,GAAGD,IAAI,aAAa,EAAE;IAAEiB,MAAM,EAAE,MAAM;IAAEC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,OAAO;EAAE,CAAC,CAAC;EAEpFK,WAAW,EAAEA,CAACC,OAAO,GAAG,EAAE,KACxBrB,SAAS,CAAC,GAAGD,IAAI,kBAAkBsB,OAAO,GAAG,YAAYC,kBAAkB,CAACD,OAAO,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC;EAEhGE,SAAS,EAAEA,CAACF,OAAO,GAAG,EAAE,KACtBrB,SAAS,CAAC,GAAGD,IAAI,gBAAgBsB,OAAO,GAAG,YAAYC,kBAAkB,CAACD,OAAO,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC;EAE9FG,KAAK,EAAEA,CAAA,KAAMxB,SAAS,CAAC,GAAGD,IAAI,cAAc,EAAE;IAAEiB,MAAM,EAAE,MAAM;IAAEC,IAAI,EAAE;EAAK,CAAC;AAC9E,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}